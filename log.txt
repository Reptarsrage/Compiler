Buildfile: /home/adam/Documents/school/cse401/401_project/build.xml

init:
    [mkdir] Created dir: /home/adam/Documents/school/cse401/401_project/build/classes

check.parse.files:

gen-parser:

gen-scanner:
     [java] Reading "src/Scanner/minijava.jflex"
     [java] Constructing NFA : 307 states in NFA
     [java] Converting NFA to DFA : 
     [java] .........................................................................................................................................................................
     [java] 171 states before minimization, 151 states in minimized DFA
     [java] Writing code to "src/Scanner/scanner.java"

compile:
    [javac] Compiling 68 source files to /home/adam/Documents/school/cse401/401_project/build/classes
    [javac] Note: /home/adam/Documents/school/cse401/401_project/src/CodeGenMain.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.

test-parser-all:
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_03.java------------
     [java] class cse401c_correct_03 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestWhileLoopIntLiteral().test());
     [java]   }
     [java] }
     [java] 
     [java] class TestWhileLoopIntLiteral { 
     [java] 
     [java]   public int test () { 
     [java]     int i;
     [java]     i = 0;
     [java]     while ((i < 5)) {
     [java] 	  i = (i + 1);
     [java] 	  if ((i == 5)) {
     [java]         System.out.println(i);
     [java]     } else {
     [java]          System.out.println(i);
     [java]     }
     [java] 	}
     [java]     return 5;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_07.java------------
     [java] class cse401c_correct_07 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestIntVars().test(0));
     [java]   }
     [java] }
     [java] 
     [java] class TestIntVars { 
     [java] 
     [java]   public int test (int x) { 
     [java]     int a;
     [java]     a = x;
     [java]     System.out.println(a);
     [java]     a = (a + 1);
     [java]     return a;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/ExerciseDouble.java------------
     [java] class ExerciseDouble {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new Worker().OneFloat());
     [java]   }
     [java] }
     [java] 
     [java] class Worker { 
     [java]   int x;
     [java]   public double AddFloatInt (double d, int i) { 
     [java]     double back;
     [java]     if ((i == 1)) {
     [java]         back = (d + 1.0);
     [java]     } else {
     [java]          back = (d + 2.0);
     [java]     }
     [java]     return back;
     [java]   }
     [java]   public double OneFloat () { 
     [java]     double [] A;
     [java]     int i;
     [java]     double d;
     [java]     double aNaN;
     [java]     double aInf;
     [java]     if ((3.0 < 4.0)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(9999);
     [java]     }
     [java]     if ((3.0 <= 3.0)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(9999);
     [java]     }
     [java]     if ((3.0 == 3.0)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(9999);
     [java]     }
     [java]     if ((3.0 == 4.0)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(9999);
     [java]     }
     [java]     if ((4.0 == 3.0)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(9999);
     [java]     }
     [java]     if ((4.0 >= 4.0)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(9999);
     [java]     }
     [java]     if ((4.0 >= 3.0)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(9999);
     [java]     }
     [java]     aNaN = (0.0 / 0.0);
     [java]     if ((aNaN == aNaN)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(8888);
     [java]     }
     [java]     if ((3.0 < aNaN)) {
     [java]         System.out.println(8887);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if ((3.0 <= aNaN)) {
     [java]         System.out.println(8886);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if ((3.0 == aNaN)) {
     [java]         System.out.println(8885);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if ((3.0 == aNaN)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(8884);
     [java]     }
     [java]     if ((3.0 >= aNaN)) {
     [java]         System.out.println(8883);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if ((3.0 > aNaN)) {
     [java]         System.out.println(8882);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if ((aNaN < 3.0)) {
     [java]         System.out.println(7777);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if ((aNaN <= 3.0)) {
     [java]         System.out.println(7776);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if ((aNaN == 3.0)) {
     [java]         System.out.println(7775);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if ((aNaN == 3.0)) {
     [java]         System.out.println(0);
     [java]     } else {
     [java]          System.out.println(7774);
     [java]     }
     [java]     if ((aNaN >= 3.0)) {
     [java]         System.out.println(7773);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if ((aNaN > 3.0)) {
     [java]         System.out.println(7772);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     A = new int [20];
     [java]     i = 0;
     [java]     d = 0.0;
     [java]     while ((i < 20)) {
     [java] 	  A[i] = d;
     [java] 	  d = (d + 1.0);
     [java] 	  i = (i + 1);
     [java] 	}
     [java]     return (0.5 * 2.0);
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/BinaryTree.java------------
     [java] class BinaryTree {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new BT().Start());
     [java]   }
     [java] }
     [java] 
     [java] class BT { 
     [java] 
     [java]   public int Start () { 
     [java]     Tree root;
     [java]     boolean ntb;
     [java]     int nti;
     [java]     root = new Tree();
     [java]     ntb = root.Init(16);
     [java]     ntb = root.Print();
     [java]     System.out.println(100000000);
     [java]     ntb = root.Insert(8);
     [java]     ntb = root.Print();
     [java]     ntb = root.Insert(24);
     [java]     ntb = root.Insert(4);
     [java]     ntb = root.Insert(12);
     [java]     ntb = root.Insert(20);
     [java]     ntb = root.Insert(28);
     [java]     ntb = root.Insert(14);
     [java]     ntb = root.Print();
     [java]     System.out.println(root.Search(24));
     [java]     System.out.println(root.Search(12));
     [java]     System.out.println(root.Search(16));
     [java]     System.out.println(root.Search(50));
     [java]     System.out.println(root.Search(12));
     [java]     ntb = root.Delete(12);
     [java]     ntb = root.Print();
     [java]     System.out.println(root.Search(12));
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] class Tree { 
     [java]   Tree left;
     [java]   Tree right;
     [java]   int key;
     [java]   boolean has_left;
     [java]   boolean has_right;
     [java]   Tree my_null;
     [java]   public boolean Init (int v_key) { 
     [java]     key = v_key;
     [java]     has_left = false;
     [java]     has_right = false;
     [java]     return true;
     [java]   }
     [java]   public boolean SetRight (Tree rn) { 
     [java]     right = rn;
     [java]     return true;
     [java]   }
     [java]   public boolean SetLeft (Tree ln) { 
     [java]     left = ln;
     [java]     return true;
     [java]   }
     [java]   public Tree GetRight () { 
     [java]     return right;
     [java]   }
     [java]   public Tree GetLeft () { 
     [java]     return left;
     [java]   }
     [java]   public int GetKey () { 
     [java]     return key;
     [java]   }
     [java]   public boolean SetKey (int v_key) { 
     [java]     key = v_key;
     [java]     return true;
     [java]   }
     [java]   public boolean GetHas_Right () { 
     [java]     return has_right;
     [java]   }
     [java]   public boolean GetHas_Left () { 
     [java]     return has_left;
     [java]   }
     [java]   public boolean SetHas_Left (boolean val) { 
     [java]     has_left = val;
     [java]     return true;
     [java]   }
     [java]   public boolean SetHas_Right (boolean val) { 
     [java]     has_right = val;
     [java]     return true;
     [java]   }
     [java]   public boolean Compare (int num1, int num2) { 
     [java]     boolean ntb;
     [java]     int nti;
     [java]     ntb = false;
     [java]     nti = (num2 + 1);
     [java]     if ((num1 < num2)) {
     [java]         ntb = false;
     [java]     } else {
     [java]          if (!(num1 < nti)) {
     [java]         ntb = false;
     [java]     } else {
     [java]          ntb = true;
     [java]     }
     [java]     }
     [java]     return ntb;
     [java]   }
     [java]   public boolean Insert (int v_key) { 
     [java]     Tree new_node;
     [java]     boolean ntb;
     [java]     boolean cont;
     [java]     int key_aux;
     [java]     Tree current_node;
     [java]     new_node = new Tree();
     [java]     ntb = new_node.Init(v_key);
     [java]     current_node = this;
     [java]     cont = true;
     [java]     while (cont) {
     [java] 	  key_aux = current_node.GetKey();
     [java] 	  if ((v_key < key_aux)) {
     [java]         if (current_node.GetHas_Left()) {
     [java]         current_node = current_node.GetLeft();
     [java]     } else {
     [java]          cont = false;
     [java]          ntb = current_node.SetHas_Left(true);
     [java]          ntb = current_node.SetLeft(new_node);
     [java]     }
     [java]     } else {
     [java]          if (current_node.GetHas_Right()) {
     [java]         current_node = current_node.GetRight();
     [java]     } else {
     [java]          cont = false;
     [java]          ntb = current_node.SetHas_Right(true);
     [java]          ntb = current_node.SetRight(new_node);
     [java]     }
     [java]     }
     [java] 	}
     [java]     return true;
     [java]   }
     [java]   public boolean Delete (int v_key) { 
     [java]     Tree current_node;
     [java]     Tree parent_node;
     [java]     boolean cont;
     [java]     boolean found;
     [java]     boolean is_root;
     [java]     int key_aux;
     [java]     boolean ntb;
     [java]     current_node = this;
     [java]     parent_node = this;
     [java]     cont = true;
     [java]     found = false;
     [java]     is_root = true;
     [java]     while (cont) {
     [java] 	  key_aux = current_node.GetKey();
     [java] 	  if ((v_key < key_aux)) {
     [java]         if (current_node.GetHas_Left()) {
     [java]         parent_node = current_node;
     [java]         current_node = current_node.GetLeft();
     [java]     } else {
     [java]          cont = false;
     [java]     }
     [java]     } else {
     [java]          if ((key_aux < v_key)) {
     [java]         if (current_node.GetHas_Right()) {
     [java]         parent_node = current_node;
     [java]         current_node = current_node.GetRight();
     [java]     } else {
     [java]          cont = false;
     [java]     }
     [java]     } else {
     [java]          if (is_root) {
     [java]         if ((!current_node.GetHas_Right() && !current_node.GetHas_Left())) {
     [java]         ntb = true;
     [java]     } else {
     [java]          ntb = this.Remove(parent_node, current_node);
     [java]     }
     [java]     } else {
     [java]          ntb = this.Remove(parent_node, current_node);
     [java]     }
     [java]          found = true;
     [java]          cont = false;
     [java]     }
     [java]     }
     [java] 	  is_root = false;
     [java] 	}
     [java]     return found;
     [java]   }
     [java]   public boolean Remove (Tree p_node, Tree c_node) { 
     [java]     boolean ntb;
     [java]     int auxkey1;
     [java]     int auxkey2;
     [java]     if (c_node.GetHas_Left()) {
     [java]         ntb = this.RemoveLeft(p_node, c_node);
     [java]     } else {
     [java]          if (c_node.GetHas_Right()) {
     [java]         ntb = this.RemoveRight(p_node, c_node);
     [java]     } else {
     [java]          auxkey1 = c_node.GetKey();
     [java]          auxkey2 = p_node.GetLeft().GetKey();
     [java]          if (this.Compare(auxkey1, auxkey2)) {
     [java]         ntb = p_node.SetLeft(my_null);
     [java]         ntb = p_node.SetHas_Left(false);
     [java]     } else {
     [java]          ntb = p_node.SetRight(my_null);
     [java]          ntb = p_node.SetHas_Right(false);
     [java]     }
     [java]     }
     [java]     }
     [java]     return true;
     [java]   }
     [java]   public boolean RemoveRight (Tree p_node, Tree c_node) { 
     [java]     boolean ntb;
     [java]     while (c_node.GetHas_Right()) {
     [java] 	  ntb = c_node.SetKey(c_node.GetRight().GetKey());
     [java] 	  p_node = c_node;
     [java] 	  c_node = c_node.GetRight();
     [java] 	}
     [java]     ntb = p_node.SetRight(my_null);
     [java]     ntb = p_node.SetHas_Right(false);
     [java]     return true;
     [java]   }
     [java]   public boolean RemoveLeft (Tree p_node, Tree c_node) { 
     [java]     boolean ntb;
     [java]     while (c_node.GetHas_Left()) {
     [java] 	  ntb = c_node.SetKey(c_node.GetLeft().GetKey());
     [java] 	  p_node = c_node;
     [java] 	  c_node = c_node.GetLeft();
     [java] 	}
     [java]     ntb = p_node.SetLeft(my_null);
     [java]     ntb = p_node.SetHas_Left(false);
     [java]     return true;
     [java]   }
     [java]   public int Search (int v_key) { 
     [java]     boolean cont;
     [java]     int ifound;
     [java]     Tree current_node;
     [java]     int key_aux;
     [java]     current_node = this;
     [java]     cont = true;
     [java]     ifound = 0;
     [java]     while (cont) {
     [java] 	  key_aux = current_node.GetKey();
     [java] 	  if ((v_key < key_aux)) {
     [java]         if (current_node.GetHas_Left()) {
     [java]         current_node = current_node.GetLeft();
     [java]     } else {
     [java]          cont = false;
     [java]     }
     [java]     } else {
     [java]          if ((key_aux < v_key)) {
     [java]         if (current_node.GetHas_Right()) {
     [java]         current_node = current_node.GetRight();
     [java]     } else {
     [java]          cont = false;
     [java]     }
     [java]     } else {
     [java]          ifound = 1;
     [java]          cont = false;
     [java]     }
     [java]     }
     [java] 	}
     [java]     return ifound;
     [java]   }
     [java]   public boolean Print () { 
     [java]     Tree current_node;
     [java]     boolean ntb;
     [java]     current_node = this;
     [java]     ntb = this.RecPrint(current_node);
     [java]     return true;
     [java]   }
     [java]   public boolean RecPrint (Tree node) { 
     [java]     boolean ntb;
     [java]     if (node.GetHas_Left()) {
     [java]         ntb = this.RecPrint(node.GetLeft());
     [java]     } else {
     [java]          ntb = true;
     [java]     }
     [java]     System.out.println(node.GetKey());
     [java]     if (node.GetHas_Right()) {
     [java]         ntb = this.RecPrint(node.GetRight());
     [java]     } else {
     [java]          ntb = true;
     [java]     }
     [java]     return true;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/QuickSort.java------------
     [java] class QuickSort {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new QS().Start(10));
     [java]   }
     [java] }
     [java] 
     [java] class QS { 
     [java]   int [] number;
     [java]   int size;
     [java]   public int Start (int sz) { 
     [java]     int aux01;
     [java]     aux01 = this.Init(sz);
     [java]     aux01 = this.Print();
     [java]     System.out.println(9999);
     [java]     aux01 = (size - 1);
     [java]     aux01 = this.Sort(0, aux01);
     [java]     aux01 = this.Print();
     [java]     return 0;
     [java]   }
     [java]   public int Sort (int left, int right) { 
     [java]     int v;
     [java]     int i;
     [java]     int j;
     [java]     int nt;
     [java]     int t;
     [java]     boolean cont01;
     [java]     boolean cont02;
     [java]     int aux03;
     [java]     t = 0;
     [java]     if ((left < right)) {
     [java]         v = number[right];
     [java]         i = (left - 1);
     [java]         j = right;
     [java]         cont01 = true;
     [java]         while (cont01) {
     [java] 	  cont02 = true;
     [java] 	  while (cont02) {
     [java] 	  i = (i + 1);
     [java] 	  aux03 = number[i];
     [java] 	  if (!(aux03 < v)) {
     [java]         cont02 = false;
     [java]     } else {
     [java]          cont02 = true;
     [java]     }
     [java] 	}
     [java] 	  cont02 = true;
     [java] 	  while (cont02) {
     [java] 	  j = (j - 1);
     [java] 	  aux03 = number[j];
     [java] 	  if (!(v < aux03)) {
     [java]         cont02 = false;
     [java]     } else {
     [java]          cont02 = true;
     [java]     }
     [java] 	}
     [java] 	  t = number[i];
     [java] 	  number[i] = number[j];
     [java] 	  number[j] = t;
     [java] 	  if ((j < (i + 1))) {
     [java]         cont01 = false;
     [java]     } else {
     [java]          cont01 = true;
     [java]     }
     [java] 	}
     [java]         number[j] = number[i];
     [java]         number[i] = number[right];
     [java]         number[right] = t;
     [java]         nt = this.Sort(left, (i - 1));
     [java]         nt = this.Sort((i + 1), right);
     [java]     } else {
     [java]          nt = 0;
     [java]     }
     [java]     return 0;
     [java]   }
     [java]   public int Print () { 
     [java]     int j;
     [java]     j = 0;
     [java]     while ((j < size)) {
     [java] 	  System.out.println(number[j]);
     [java] 	  j = (j + 1);
     [java] 	}
     [java]     return 0;
     [java]   }
     [java]   public int Init (int sz) { 
     [java]     size = sz;
     [java]     number = new int [sz];
     [java]     number[0] = 20;
     [java]     number[1] = 7;
     [java]     number[2] = 12;
     [java]     number[3] = 18;
     [java]     number[4] = 2;
     [java]     number[5] = 11;
     [java]     number[6] = 6;
     [java]     number[7] = 9;
     [java]     number[8] = 19;
     [java]     number[9] = 5;
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_13.java------------
     [java] class cse401c_ctfail_13 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestFailure().test());
     [java]   }
     [java] }
     [java] 
     [java] class TestFailure { 
     [java] 
     [java]   public int test1 () { 
     [java]     System.out.println(1);
     [java]     return 1;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/LinearSearch.java------------
     [java] class LinearSearch {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new LS().Start(10));
     [java]   }
     [java] }
     [java] 
     [java] class LS { 
     [java]   int [] number;
     [java]   int size;
     [java]   public int Start (int sz) { 
     [java]     int aux01;
     [java]     int aux02;
     [java]     aux01 = this.Init(sz);
     [java]     aux02 = this.Print();
     [java]     System.out.println(9999);
     [java]     System.out.println(this.Search(8));
     [java]     System.out.println(this.Search(12));
     [java]     System.out.println(this.Search(17));
     [java]     System.out.println(this.Search(50));
     [java]     return 55;
     [java]   }
     [java]   public int Print () { 
     [java]     int j;
     [java]     j = 1;
     [java]     while ((j < size)) {
     [java] 	  System.out.println(number[j]);
     [java] 	  j = (j + 1);
     [java] 	}
     [java]     return 0;
     [java]   }
     [java]   public int Search (int num) { 
     [java]     int j;
     [java]     boolean ls01;
     [java]     int ifound;
     [java]     int aux01;
     [java]     int aux02;
     [java]     int nt;
     [java]     j = 1;
     [java]     ls01 = false;
     [java]     ifound = 0;
     [java]     while ((j < size)) {
     [java] 	  aux01 = number[j];
     [java] 	  aux02 = (num + 1);
     [java] 	  if ((aux01 < num)) {
     [java]         nt = 0;
     [java]     } else {
     [java]          if (!(aux01 < aux02)) {
     [java]         nt = 0;
     [java]     } else {
     [java]          ls01 = true;
     [java]          ifound = 1;
     [java]          j = size;
     [java]     }
     [java]     }
     [java] 	  j = (j + 1);
     [java] 	}
     [java]     return ifound;
     [java]   }
     [java]   public int Init (int sz) { 
     [java]     int j;
     [java]     int k;
     [java]     int aux01;
     [java]     int aux02;
     [java]     size = sz;
     [java]     number = new int [sz];
     [java]     j = 1;
     [java]     k = (size + 1);
     [java]     while ((j < size)) {
     [java] 	  aux01 = (2 * j);
     [java] 	  aux02 = (k - 3);
     [java] 	  number[j] = (aux01 + aux02);
     [java] 	  j = (j + 1);
     [java] 	  k = (k - 1);
     [java] 	}
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_17.java------------
     [java] Syntax error at line 12 of input
     [java] Couldn't repair and continue parse at line 12 of input
     [java] Unexpected internal compiler error: java.lang.Exception: Can't recover from previous error(s)
     [java] java.lang.Exception: Can't recover from previous error(s)
     [java] 	at java_cup.runtime.lr_parser.report_fatal_error(lr_parser.java:375)
     [java] 	at java_cup.runtime.lr_parser.unrecovered_syntax_error(lr_parser.java:424)
     [java] 	at java_cup.runtime.lr_parser.parse(lr_parser.java:616)
     [java] 	at TestParser.main(TestParser.java:110)
     [java] 
     [java] ------------Parsing SamplePrograms/BinarySearch.java------------
     [java] class BinarySearch {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new BS().Start(20));
     [java]   }
     [java] }
     [java] 
     [java] class BS { 
     [java]   int [] number;
     [java]   int size;
     [java]   public int Start (int sz) { 
     [java]     int aux01;
     [java]     int aux02;
     [java]     aux01 = this.Init(sz);
     [java]     aux02 = this.Print();
     [java]     if (this.Search(8)) {
     [java]         System.out.println(1);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if (this.Search(19)) {
     [java]         System.out.println(1);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if (this.Search(20)) {
     [java]         System.out.println(1);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if (this.Search(21)) {
     [java]         System.out.println(1);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if (this.Search(37)) {
     [java]         System.out.println(1);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if (this.Search(38)) {
     [java]         System.out.println(1);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if (this.Search(39)) {
     [java]         System.out.println(1);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     if (this.Search(50)) {
     [java]         System.out.println(1);
     [java]     } else {
     [java]          System.out.println(0);
     [java]     }
     [java]     return 999;
     [java]   }
     [java]   public boolean Search (int num) { 
     [java]     boolean bs01;
     [java]     int right;
     [java]     int left;
     [java]     boolean var_cont;
     [java]     int medium;
     [java]     int aux01;
     [java]     int nt;
     [java]     aux01 = 0;
     [java]     bs01 = false;
     [java]     right = number.length;
     [java]     right = (right - 1);
     [java]     left = 0;
     [java]     var_cont = true;
     [java]     while (var_cont) {
     [java] 	  medium = (left + right);
     [java] 	  medium = this.Div(medium);
     [java] 	  aux01 = number[medium];
     [java] 	  if ((num < aux01)) {
     [java]         right = (medium - 1);
     [java]     } else {
     [java]          left = (medium + 1);
     [java]     }
     [java] 	  if (this.Compare(aux01, num)) {
     [java]         var_cont = false;
     [java]     } else {
     [java]          var_cont = true;
     [java]     }
     [java] 	  if ((right < left)) {
     [java]         var_cont = false;
     [java]     } else {
     [java]          nt = 0;
     [java]     }
     [java] 	}
     [java]     if (this.Compare(aux01, num)) {
     [java]         bs01 = true;
     [java]     } else {
     [java]          bs01 = false;
     [java]     }
     [java]     return bs01;
     [java]   }
     [java]   public int Div (int num) { 
     [java]     int count01;
     [java]     int count02;
     [java]     int aux03;
     [java]     count01 = 0;
     [java]     count02 = 0;
     [java]     aux03 = (num - 1);
     [java]     while ((count02 < aux03)) {
     [java] 	  count01 = (count01 + 1);
     [java] 	  count02 = (count02 + 2);
     [java] 	}
     [java]     return count01;
     [java]   }
     [java]   public boolean Compare (int num1, int num2) { 
     [java]     boolean retval;
     [java]     int aux02;
     [java]     retval = false;
     [java]     aux02 = (num2 + 1);
     [java]     if ((num1 < num2)) {
     [java]         retval = false;
     [java]     } else {
     [java]          if (!(num1 < aux02)) {
     [java]         retval = false;
     [java]     } else {
     [java]          retval = true;
     [java]     }
     [java]     }
     [java]     return retval;
     [java]   }
     [java]   public int Print () { 
     [java]     int j;
     [java]     j = 1;
     [java]     while ((j < size)) {
     [java] 	  System.out.println(number[j]);
     [java] 	  j = (j + 1);
     [java] 	}
     [java]     System.out.println(99999);
     [java]     return 0;
     [java]   }
     [java]   public int Init (int sz) { 
     [java]     int j;
     [java]     int k;
     [java]     int aux02;
     [java]     int aux01;
     [java]     size = sz;
     [java]     number = new int [sz];
     [java]     j = 1;
     [java]     k = (size + 1);
     [java]     while ((j < size)) {
     [java] 	  aux01 = (2 * j);
     [java] 	  aux02 = (k - 3);
     [java] 	  number[j] = (aux01 + aux02);
     [java] 	  j = (j + 1);
     [java] 	  k = (k - 1);
     [java] 	}
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/DoubleOutput.java------------
     [java] class DoubleOutput {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new DoubleOutputWorker().doWork());
     [java]   }
     [java] }
     [java] 
     [java] class DoubleOutputWorker { 
     [java] 
     [java]   public double doE () { 
     [java]     return 2.718281828459045;
     [java]   }
     [java]   public double doWork () { 
     [java]     System.out.println((0.0 / 0.0));
     [java]     System.out.println((1.0 / 0.0));
     [java]     System.out.println(((0.0 - 1.0) / 0.0));
     [java]     System.out.println((0.0 - 0.0));
     [java]     System.out.println(1.0);
     [java]     System.out.println(1.5);
     [java]     System.out.println((1.0 * 2.718281828459045));
     [java]     System.out.println((10.0 * 2.718281828459045));
     [java]     System.out.println((100.0 * 2.718281828459045));
     [java]     System.out.println((1000.0 * 2.718281828459045));
     [java]     System.out.println((10000.0 * 2.718281828459045));
     [java]     System.out.println(0.5);
     [java]     System.out.println(0.05);
     [java]     System.out.println(0.005);
     [java]     System.out.println(5.0E-4);
     [java]     System.out.println(2.0);
     [java]     System.out.println(20.0);
     [java]     System.out.println(200.0);
     [java]     System.out.println(2000.0);
     [java]     System.out.println(20000.0);
     [java]     System.out.println(200000.0);
     [java]     System.out.println(2000000.0);
     [java]     System.out.println(2.0E7);
     [java]     System.out.println(2.0E8);
     [java]     return 9999.0;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/Factorial.java------------
     [java] class Factorial {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new Fac().ComputeFac(10));
     [java]   }
     [java] }
     [java] 
     [java] class Fac { 
     [java] 
     [java]   public int ComputeFac (int num) { 
     [java]     int num_aux;
     [java]     if ((num < 1)) {
     [java]         num_aux = 1;
     [java]     } else {
     [java]          num_aux = (num * this.ComputeFac((num - 1)));
     [java]     }
     [java]     return num_aux;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/Pi.java------------
     [java] class Pi {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new PiWorker().doWork());
     [java]   }
     [java] }
     [java] 
     [java] class PiWorker { 
     [java] 
     [java]   public int writeDigit (int x) { 
     [java]     System.out.println(x);
     [java]     return x;
     [java]   }
     [java]   public int doWork () { 
     [java]     int n;
     [java]     int len;
     [java]     int i;
     [java]     int j;
     [java]     int k;
     [java]     int q;
     [java]     int x;
     [java]     int nines;
     [java]     int predigit;
     [java]     int junk;
     [java]     int [] a;
     [java]     n = 1000;
     [java]     len = ((10 * n) / 3);
     [java]     a = new int [(len + 1)];
     [java]     j = 1;
     [java]     while ((j <= len)) {
     [java] 	  a[j] = 2;
     [java] 	  j = (j + 1);
     [java] 	}
     [java]     nines = 0;
     [java]     predigit = 0;
     [java]     j = 1;
     [java]     while ((j <= n)) {
     [java] 	  q = 0;
     [java] 	  i = len;
     [java] 	  while ((i >= 1)) {
     [java] 	  x = ((10 * a[i]) + (q * i));
     [java] 	  a[i] = (x % ((2 * i) - 1));
     [java] 	  q = (x / ((2 * i) - 1));
     [java] 	  i = (i - 1);
     [java] 	}
     [java] 	  a[1] = (q % 10);
     [java] 	  q = (q / 10);
     [java] 	  if ((q == 9)) {
     [java]         nines = (nines + 1);
     [java]     } else {
     [java]          if ((q == 10)) {
     [java]         junk = this.writeDigit((predigit + 1));
     [java]         k = 1;
     [java]         while ((k <= nines)) {
     [java] 	  junk = this.writeDigit(0);
     [java] 	  k = (k + 1);
     [java] 	}
     [java]         predigit = 0;
     [java]         nines = 0;
     [java]     } else {
     [java]          junk = this.writeDigit(predigit);
     [java]          predigit = q;
     [java]          if ((nines == 0)) {
     [java]         k = 1;
     [java]         while ((k <= nines)) {
     [java] 	  junk = this.writeDigit(9);
     [java] 	  k = (k + 1);
     [java] 	}
     [java]         nines = 0;
     [java]     } else {
     [java]     }
     [java]     }
     [java]     }
     [java] 	  j = (j + 1);
     [java] 	}
     [java]     junk = this.writeDigit(predigit);
     [java]     return 111111;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_16.java------------
     [java] class cse401c_ctfail_16 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestOverload().a(0));
     [java]   }
     [java] }
     [java] 
     [java] class TestOverload { 
     [java] 
     [java]   public int a () { 
     [java]     return 1;
     [java]   }
     [java]   public int a (int x) { 
     [java]     return x;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/Sqrt.java------------
     [java] class Sqrt {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new SqrtWorker().Sqrt(2.0));
     [java]   }
     [java] }
     [java] 
     [java] class SqrtWorker { 
     [java] 
     [java]   public double Sqrt (double c) { 
     [java]     double epsilon;
     [java]     double t;
     [java]     epsilon = 1.0E-15;
     [java]     t = c;
     [java]     while ((this.Abs((t - (c / t))) > (epsilon * t))) {
     [java] 	  t = (((c / t) + t) / 2.0);
     [java] 	}
     [java]     return t;
     [java]   }
     [java]   public double Abs (double v) { 
     [java]     double abs;
     [java]     if ((v < 0.0)) {
     [java]         abs = (0.0 - v);
     [java]     } else {
     [java]          abs = v;
     [java]     }
     [java]     return abs;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_02.java------------
     [java] class cse401c_correct_02 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestIntLiteralCompareBranch().test());
     [java]   }
     [java] }
     [java] 
     [java] class TestIntLiteralCompareBranch { 
     [java] 
     [java]   public int test () { 
     [java]     int res;
     [java]     if ((1 == 1)) {
     [java]         res = 1;
     [java]     } else {
     [java]          res = 0;
     [java]     }
     [java]     return res;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_06.java------------
     [java] class cse401c_correct_06 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestFunctionDispatch().test());
     [java]   }
     [java] }
     [java] 
     [java] class TestFunctionDispatch { 
     [java] 
     [java]   public int test () { 
     [java]     return 1;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/Asin.java------------
     [java] class Asin {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new AsinWorker().driver());
     [java]   }
     [java] }
     [java] 
     [java] class AsinWorker { 
     [java] 
     [java]   public int driver () { 
     [java]     System.out.println(this.asin(1.0));
     [java]     System.out.println(this.asin(0.5));
     [java]     System.out.println(this.asin(2.0));
     [java]     System.out.println(this.asin((0.0 - 1.0)));
     [java]     System.out.println(this.asin((0.0 - 0.5)));
     [java]     System.out.println(this.asin((0.0 - 2.0)));
     [java]     System.out.println((2.0 * this.asin(1.0)));
     [java]     return 9999;
     [java]   }
     [java]   public double Pi () { 
     [java]     return 3.141592653589793;
     [java]   }
     [java]   public double asin (double x) { 
     [java]     boolean sign;
     [java]     double back;
     [java]     double temp;
     [java]     if ((x == 0.0)) {
     [java]         temp = x;
     [java]     } else {
     [java]          if ((x < 0.0)) {
     [java]         x = (0.0 - x);
     [java]         sign = true;
     [java]     } else {
     [java]          sign = false;
     [java]     }
     [java]          if ((x > 1.0)) {
     [java]         temp = this.NaN();
     [java]     } else {
     [java]          temp = this.Sqrt((1.0 - (x * x)));
     [java]          if ((x > 0.7)) {
     [java]         temp = ((this.Pi() / 2.0) - this.satan((temp / x)));
     [java]     } else {
     [java]          temp = this.satan((x / temp));
     [java]     }
     [java]          if (sign) {
     [java]         temp = (0.0 - temp);
     [java]     } else {
     [java]          temp = temp;
     [java]     }
     [java]     }
     [java]     }
     [java]     return temp;
     [java]   }
     [java]   public double NaN () { 
     [java]     return (0.0 / 0.0);
     [java]   }
     [java]   public double Abs (double v) { 
     [java]     double abs;
     [java]     if ((v < 0.0)) {
     [java]         abs = (0.0 - v);
     [java]     } else {
     [java]          abs = v;
     [java]     }
     [java]     return abs;
     [java]   }
     [java]   public double Sqrt (double c) { 
     [java]     double epsilon;
     [java]     double t;
     [java]     epsilon = 1.0E-15;
     [java]     t = c;
     [java]     while ((this.Abs((t - (c / t))) > (epsilon * t))) {
     [java] 	  t = (((c / t) + t) / 2.0);
     [java] 	}
     [java]     return t;
     [java]   }
     [java]   public double satan (double x) { 
     [java]     double Morebits;
     [java]     double Tan3pio8;
     [java]     double back;
     [java]     Morebits = 6.123233995736766E-17;
     [java]     Tan3pio8 = 2.414213562373095;
     [java]     if ((x <= 0.66)) {
     [java]         back = this.xatan(x);
     [java]     } else {
     [java]          if ((x > Tan3pio8)) {
     [java]         back = (((this.Pi() / 2.0) - this.xatan((1.0 / x))) + Morebits);
     [java]     } else {
     [java]          back = (((this.Pi() / 4.0) + this.xatan(((x - 1.0) / (x + 1.0)))) + (0.5 * Morebits));
     [java]     }
     [java]     }
     [java]     return back;
     [java]   }
     [java]   public double xatan (double x) { 
     [java]     double z;
     [java]     double P0;
     [java]     double P1;
     [java]     double P2;
     [java]     double P3;
     [java]     double P4;
     [java]     double Q0;
     [java]     double Q1;
     [java]     double Q2;
     [java]     double Q3;
     [java]     double Q4;
     [java]     P0 = (0.0 - 0.8750608600031904);
     [java]     P1 = (0.0 - 16.157537187333652);
     [java]     P2 = (0.0 - 75.00855792314705);
     [java]     P3 = (0.0 - 122.88666844901361);
     [java]     P4 = (0.0 - 64.85021904942025);
     [java]     Q0 = (0.0 + 24.858464901423062);
     [java]     Q1 = (0.0 + 165.02700983169885);
     [java]     Q2 = (0.0 + 432.88106049129027);
     [java]     Q3 = (0.0 + 485.3903996359137);
     [java]     Q4 = (0.0 + 194.5506571482614);
     [java]     z = (x * x);
     [java]     z = ((z * ((((((((P0 * z) + P1) * z) + P2) * z) + P3) * z) + P4)) / (((((((((z + Q0) * z) + Q1) * z) + Q2) * z) + Q3) * z) + Q4));
     [java]     z = ((x * z) + x);
     [java]     return z;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_10.java------------
     [java] class cse401c_correct_10 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestDoubleSimple().test());
     [java]   }
     [java] }
     [java] 
     [java] class TestDoubleSimple { 
     [java] 
     [java]   public double test () { 
     [java]     double d1;
     [java]     double d2;
     [java]     double d3;
     [java]     double d4;
     [java]     d1 = 20.0;
     [java]     d2 = 0.003;
     [java]     d3 = 0.004;
     [java]     d4 = 3.4E11;
     [java]     System.out.println((d3 * d1));
     [java]     System.out.println((d1 / d1));
     [java]     System.out.println((3.0 * d2));
     [java]     System.out.println(((((d3 * 3) * d4) + d2) - (d1 % d3)));
     [java]     System.out.println((d1 / d2));
     [java]     return (((d1 + d2) + d3) + d4);
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_08.java------------
     [java] class cse401c_correct_08 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(1.0);
     [java]     System.out.println(1.0);
     [java]     System.out.println(1.0);
     [java]     System.out.println(1.0);
     [java]     System.out.println(0.1);
     [java]     System.out.println(1.0);
     [java]     System.out.println(1.0);
     [java]     System.out.println(1.0);
     [java]     System.out.println(1.01);
     [java]     System.out.println(10000.0);
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_21.java------------
     [java] class cse401c_ctfail_21 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new Test().test());
     [java]   }
     [java] }
     [java] 
     [java] class Test { 
     [java] 
     [java]   public int test () { 
     [java]     foo i;
     [java]     return 1;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_14.java------------
     [java] class cse401c_ctfail_14 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new Test().test());
     [java]   }
     [java] }
     [java] 
     [java] class Test { 
     [java] 
     [java]   public int test () { 
     [java]     int i;
     [java]     int i;
     [java]     i = 0;
     [java]     i = 0;
     [java]     return i;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_rtfail_12.java------------
     [java] class cse401c_rtfail_12 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestUnin().init());
     [java]   }
     [java] }
     [java] 
     [java] class TestUnin { 
     [java] 
     [java]   public int init () { 
     [java]     int [] arr;
     [java]     arr = new int [1];
     [java]     return this.test(arg);
     [java]   }
     [java]   public int test (int [] i) { 
     [java]     int count;
     [java]     count = 0;
     [java]     while (true) {
     [java] 	  i[count] = 1;
     [java] 	  count = (count + 1);
     [java] 	}
     [java]     return 1;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_00.java------------
     [java] class cse401c_correct_00 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(1);
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_18.java------------
     [java] Syntax error at line 12 of input
     [java] Couldn't repair and continue parse at line 12 of input
     [java] Unexpected internal compiler error: java.lang.Exception: Can't recover from previous error(s)
     [java] java.lang.Exception: Can't recover from previous error(s)
     [java] 	at java_cup.runtime.lr_parser.report_fatal_error(lr_parser.java:375)
     [java] 	at java_cup.runtime.lr_parser.unrecovered_syntax_error(lr_parser.java:424)
     [java] 	at java_cup.runtime.lr_parser.parse(lr_parser.java:616)
     [java] 	at TestParser.main(TestParser.java:110)
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_04.java------------
     [java] class cse401c_correct_04 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestObjects().run(100));
     [java]   }
     [java] }
     [java] 
     [java] class TestObjects { 
     [java] 
     [java]   public boolean run (int v) { 
     [java]     Obj o;
     [java]     int res;
     [java]     o = new Obj();
     [java]     res = o.setValue(v);
     [java]     return o.getValue();
     [java]   }
     [java] }
     [java] 
     [java] class Obj { 
     [java]   int value;
     [java]   public int setValue (int v) { 
     [java]     value = v;
     [java]     return value;
     [java]   }
     [java]   public int getValue () { 
     [java]     return value;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/BubbleSort.java------------
     [java] class BubbleSort {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new BBS().Start(10));
     [java]   }
     [java] }
     [java] 
     [java] class BBS { 
     [java]   int [] number;
     [java]   int size;
     [java]   public int Start (int sz) { 
     [java]     int aux01;
     [java]     aux01 = this.Init(sz);
     [java]     aux01 = this.Print();
     [java]     System.out.println(99999);
     [java]     aux01 = this.Sort();
     [java]     aux01 = this.Print();
     [java]     return 0;
     [java]   }
     [java]   public int Sort () { 
     [java]     int nt;
     [java]     int i;
     [java]     int aux02;
     [java]     int aux04;
     [java]     int aux05;
     [java]     int aux06;
     [java]     int aux07;
     [java]     int j;
     [java]     int t;
     [java]     i = (size - 1);
     [java]     aux02 = (0 - 1);
     [java]     while ((aux02 < i)) {
     [java] 	  j = 1;
     [java] 	  while ((j < (i + 1))) {
     [java] 	  aux07 = (j - 1);
     [java] 	  aux04 = number[aux07];
     [java] 	  aux05 = number[j];
     [java] 	  if ((aux05 < aux04)) {
     [java]         aux06 = (j - 1);
     [java]         t = number[aux06];
     [java]         number[aux06] = number[j];
     [java]         number[j] = t;
     [java]     } else {
     [java]          nt = 0;
     [java]     }
     [java] 	  j = (j + 1);
     [java] 	}
     [java] 	  i = (i - 1);
     [java] 	}
     [java]     return 0;
     [java]   }
     [java]   public int Print () { 
     [java]     int j;
     [java]     j = 0;
     [java]     while ((j < size)) {
     [java] 	  System.out.println(number[j]);
     [java] 	  j = (j + 1);
     [java] 	}
     [java]     return 0;
     [java]   }
     [java]   public int Init (int sz) { 
     [java]     size = sz;
     [java]     number = new int [sz];
     [java]     number[0] = 20;
     [java]     number[1] = 7;
     [java]     number[2] = 12;
     [java]     number[3] = 18;
     [java]     number[4] = 2;
     [java]     number[5] = 11;
     [java]     number[6] = 6;
     [java]     number[7] = 9;
     [java]     number[8] = 19;
     [java]     number[9] = 5;
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_01.java------------
     [java] class cse401c_correct_01 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestIntLiteralArithmetic().test());
     [java]   }
     [java] }
     [java] 
     [java] class TestIntLiteralArithmetic { 
     [java] 
     [java]   public int test () { 
     [java]     System.out.println((1 + 1));
     [java]     System.out.println((3 - 2));
     [java]     System.out.println((2 * 2));
     [java]     System.out.println((2 / 2));
     [java]     System.out.println((3 % 2));
     [java]     return 1;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/TreeVisitor.java------------
     [java] class TreeVisitor {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new TV().Start());
     [java]   }
     [java] }
     [java] 
     [java] class TV { 
     [java] 
     [java]   public int Start () { 
     [java]     Tree root;
     [java]     boolean ntb;
     [java]     int nti;
     [java]     MyVisitor v;
     [java]     root = new Tree();
     [java]     ntb = root.Init(16);
     [java]     ntb = root.Print();
     [java]     System.out.println(100000000);
     [java]     ntb = root.Insert(8);
     [java]     ntb = root.Insert(24);
     [java]     ntb = root.Insert(4);
     [java]     ntb = root.Insert(12);
     [java]     ntb = root.Insert(20);
     [java]     ntb = root.Insert(28);
     [java]     ntb = root.Insert(14);
     [java]     ntb = root.Print();
     [java]     System.out.println(100000000);
     [java]     v = new MyVisitor();
     [java]     System.out.println(50000000);
     [java]     nti = root.accept(v);
     [java]     System.out.println(100000000);
     [java]     System.out.println(root.Search(24));
     [java]     System.out.println(root.Search(12));
     [java]     System.out.println(root.Search(16));
     [java]     System.out.println(root.Search(50));
     [java]     System.out.println(root.Search(12));
     [java]     ntb = root.Delete(12);
     [java]     ntb = root.Print();
     [java]     System.out.println(root.Search(12));
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] class Tree { 
     [java]   Tree left;
     [java]   Tree right;
     [java]   int key;
     [java]   boolean has_left;
     [java]   boolean has_right;
     [java]   Tree my_null;
     [java]   public boolean Init (int v_key) { 
     [java]     key = v_key;
     [java]     has_left = false;
     [java]     has_right = false;
     [java]     return true;
     [java]   }
     [java]   public boolean SetRight (Tree rn) { 
     [java]     right = rn;
     [java]     return true;
     [java]   }
     [java]   public boolean SetLeft (Tree ln) { 
     [java]     left = ln;
     [java]     return true;
     [java]   }
     [java]   public Tree GetRight () { 
     [java]     return right;
     [java]   }
     [java]   public Tree GetLeft () { 
     [java]     return left;
     [java]   }
     [java]   public int GetKey () { 
     [java]     return key;
     [java]   }
     [java]   public boolean SetKey (int v_key) { 
     [java]     key = v_key;
     [java]     return true;
     [java]   }
     [java]   public boolean GetHas_Right () { 
     [java]     return has_right;
     [java]   }
     [java]   public boolean GetHas_Left () { 
     [java]     return has_left;
     [java]   }
     [java]   public boolean SetHas_Left (boolean val) { 
     [java]     has_left = val;
     [java]     return true;
     [java]   }
     [java]   public boolean SetHas_Right (boolean val) { 
     [java]     has_right = val;
     [java]     return true;
     [java]   }
     [java]   public boolean Compare (int num1, int num2) { 
     [java]     boolean ntb;
     [java]     int nti;
     [java]     ntb = false;
     [java]     nti = (num2 + 1);
     [java]     if ((num1 < num2)) {
     [java]         ntb = false;
     [java]     } else {
     [java]          if (!(num1 < nti)) {
     [java]         ntb = false;
     [java]     } else {
     [java]          ntb = true;
     [java]     }
     [java]     }
     [java]     return ntb;
     [java]   }
     [java]   public boolean Insert (int v_key) { 
     [java]     Tree new_node;
     [java]     boolean ntb;
     [java]     Tree current_node;
     [java]     boolean cont;
     [java]     int key_aux;
     [java]     new_node = new Tree();
     [java]     ntb = new_node.Init(v_key);
     [java]     current_node = this;
     [java]     cont = true;
     [java]     while (cont) {
     [java] 	  key_aux = current_node.GetKey();
     [java] 	  if ((v_key < key_aux)) {
     [java]         if (current_node.GetHas_Left()) {
     [java]         current_node = current_node.GetLeft();
     [java]     } else {
     [java]          cont = false;
     [java]          ntb = current_node.SetHas_Left(true);
     [java]          ntb = current_node.SetLeft(new_node);
     [java]     }
     [java]     } else {
     [java]          if (current_node.GetHas_Right()) {
     [java]         current_node = current_node.GetRight();
     [java]     } else {
     [java]          cont = false;
     [java]          ntb = current_node.SetHas_Right(true);
     [java]          ntb = current_node.SetRight(new_node);
     [java]     }
     [java]     }
     [java] 	}
     [java]     return true;
     [java]   }
     [java]   public boolean Delete (int v_key) { 
     [java]     Tree current_node;
     [java]     Tree parent_node;
     [java]     boolean cont;
     [java]     boolean found;
     [java]     boolean ntb;
     [java]     boolean is_root;
     [java]     int key_aux;
     [java]     current_node = this;
     [java]     parent_node = this;
     [java]     cont = true;
     [java]     found = false;
     [java]     is_root = true;
     [java]     while (cont) {
     [java] 	  key_aux = current_node.GetKey();
     [java] 	  if ((v_key < key_aux)) {
     [java]         if (current_node.GetHas_Left()) {
     [java]         parent_node = current_node;
     [java]         current_node = current_node.GetLeft();
     [java]     } else {
     [java]          cont = false;
     [java]     }
     [java]     } else {
     [java]          if ((key_aux < v_key)) {
     [java]         if (current_node.GetHas_Right()) {
     [java]         parent_node = current_node;
     [java]         current_node = current_node.GetRight();
     [java]     } else {
     [java]          cont = false;
     [java]     }
     [java]     } else {
     [java]          if (is_root) {
     [java]         if ((!current_node.GetHas_Right() && !current_node.GetHas_Left())) {
     [java]         ntb = true;
     [java]     } else {
     [java]          ntb = this.Remove(parent_node, current_node);
     [java]     }
     [java]     } else {
     [java]          ntb = this.Remove(parent_node, current_node);
     [java]     }
     [java]          found = true;
     [java]          cont = false;
     [java]     }
     [java]     }
     [java] 	  is_root = false;
     [java] 	}
     [java]     return found;
     [java]   }
     [java]   public boolean Remove (Tree p_node, Tree c_node) { 
     [java]     boolean ntb;
     [java]     int auxkey1;
     [java]     int auxkey2;
     [java]     if (c_node.GetHas_Left()) {
     [java]         ntb = this.RemoveLeft(p_node, c_node);
     [java]     } else {
     [java]          if (c_node.GetHas_Right()) {
     [java]         ntb = this.RemoveRight(p_node, c_node);
     [java]     } else {
     [java]          auxkey1 = c_node.GetKey();
     [java]          auxkey2 = p_node.GetLeft().GetKey();
     [java]          if (this.Compare(auxkey1, auxkey2)) {
     [java]         ntb = p_node.SetLeft(my_null);
     [java]         ntb = p_node.SetHas_Left(false);
     [java]     } else {
     [java]          ntb = p_node.SetRight(my_null);
     [java]          ntb = p_node.SetHas_Right(false);
     [java]     }
     [java]     }
     [java]     }
     [java]     return true;
     [java]   }
     [java]   public boolean RemoveRight (Tree p_node, Tree c_node) { 
     [java]     boolean ntb;
     [java]     while (c_node.GetHas_Right()) {
     [java] 	  ntb = c_node.SetKey(c_node.GetRight().GetKey());
     [java] 	  p_node = c_node;
     [java] 	  c_node = c_node.GetRight();
     [java] 	}
     [java]     ntb = p_node.SetRight(my_null);
     [java]     ntb = p_node.SetHas_Right(false);
     [java]     return true;
     [java]   }
     [java]   public boolean RemoveLeft (Tree p_node, Tree c_node) { 
     [java]     boolean ntb;
     [java]     while (c_node.GetHas_Left()) {
     [java] 	  ntb = c_node.SetKey(c_node.GetLeft().GetKey());
     [java] 	  p_node = c_node;
     [java] 	  c_node = c_node.GetLeft();
     [java] 	}
     [java]     ntb = p_node.SetLeft(my_null);
     [java]     ntb = p_node.SetHas_Left(false);
     [java]     return true;
     [java]   }
     [java]   public int Search (int v_key) { 
     [java]     Tree current_node;
     [java]     int ifound;
     [java]     boolean cont;
     [java]     int key_aux;
     [java]     current_node = this;
     [java]     cont = true;
     [java]     ifound = 0;
     [java]     while (cont) {
     [java] 	  key_aux = current_node.GetKey();
     [java] 	  if ((v_key < key_aux)) {
     [java]         if (current_node.GetHas_Left()) {
     [java]         current_node = current_node.GetLeft();
     [java]     } else {
     [java]          cont = false;
     [java]     }
     [java]     } else {
     [java]          if ((key_aux < v_key)) {
     [java]         if (current_node.GetHas_Right()) {
     [java]         current_node = current_node.GetRight();
     [java]     } else {
     [java]          cont = false;
     [java]     }
     [java]     } else {
     [java]          ifound = 1;
     [java]          cont = false;
     [java]     }
     [java]     }
     [java] 	}
     [java]     return ifound;
     [java]   }
     [java]   public boolean Print () { 
     [java]     boolean ntb;
     [java]     Tree current_node;
     [java]     current_node = this;
     [java]     ntb = this.RecPrint(current_node);
     [java]     return true;
     [java]   }
     [java]   public boolean RecPrint (Tree node) { 
     [java]     boolean ntb;
     [java]     if (node.GetHas_Left()) {
     [java]         ntb = this.RecPrint(node.GetLeft());
     [java]     } else {
     [java]          ntb = true;
     [java]     }
     [java]     System.out.println(node.GetKey());
     [java]     if (node.GetHas_Right()) {
     [java]         ntb = this.RecPrint(node.GetRight());
     [java]     } else {
     [java]          ntb = true;
     [java]     }
     [java]     return true;
     [java]   }
     [java]   public int accept (Visitor v) { 
     [java]     int nti;
     [java]     System.out.println(333);
     [java]     nti = v.visit(this);
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] class Visitor { 
     [java]   Tree l;
     [java]   Tree r;
     [java]   public int visit (Tree n) { 
     [java]     int nti;
     [java]     if (n.GetHas_Right()) {
     [java]         r = n.GetRight();
     [java]         nti = r.accept(this);
     [java]     } else {
     [java]          nti = 0;
     [java]     }
     [java]     if (n.GetHas_Left()) {
     [java]         l = n.GetLeft();
     [java]         nti = l.accept(this);
     [java]     } else {
     [java]          nti = 0;
     [java]     }
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] class MyVisitor extends Visitor { 
     [java] 
     [java]   public int visit (Tree n) { 
     [java]     int nti;
     [java]     if (n.GetHas_Right()) {
     [java]         r = n.GetRight();
     [java]         nti = r.accept(this);
     [java]     } else {
     [java]          nti = 0;
     [java]     }
     [java]     System.out.println(n.GetKey());
     [java]     if (n.GetHas_Left()) {
     [java]         l = n.GetLeft();
     [java]         nti = l.accept(this);
     [java]     } else {
     [java]          nti = 0;
     [java]     }
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_19.java------------
     [java] class cse401c_ctfail_19 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new Test().test());
     [java]   }
     [java] }
     [java] 
     [java] class Test { 
     [java] 
     [java]   public int test () { 
     [java]     int [] i;
     [java]     int [] j;
     [java]     i = new int [10];
     [java]     j = new int [10];
     [java]     i = (j / i);
     [java]     return i;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/LinkedList.java------------
     [java] class LinkedList {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new LL().Start());
     [java]   }
     [java] }
     [java] 
     [java] class Element { 
     [java]   int Age;
     [java]   int Salary;
     [java]   boolean Married;
     [java]   public boolean Init (int v_Age, int v_Salary, boolean v_Married) { 
     [java]     Age = v_Age;
     [java]     Salary = v_Salary;
     [java]     Married = v_Married;
     [java]     return true;
     [java]   }
     [java]   public int GetAge () { 
     [java]     return Age;
     [java]   }
     [java]   public int GetSalary () { 
     [java]     return Salary;
     [java]   }
     [java]   public boolean GetMarried () { 
     [java]     return Married;
     [java]   }
     [java]   public boolean Equal (Element other) { 
     [java]     boolean ret_val;
     [java]     int aux01;
     [java]     int aux02;
     [java]     int nt;
     [java]     ret_val = true;
     [java]     aux01 = other.GetAge();
     [java]     if (!this.Compare(aux01, Age)) {
     [java]         ret_val = false;
     [java]     } else {
     [java]          aux02 = other.GetSalary();
     [java]          if (!this.Compare(aux02, Salary)) {
     [java]         ret_val = false;
     [java]     } else {
     [java]          if (Married) {
     [java]         if (!other.GetMarried()) {
     [java]         ret_val = false;
     [java]     } else {
     [java]          nt = 0;
     [java]     }
     [java]     } else {
     [java]          if (other.GetMarried()) {
     [java]         ret_val = false;
     [java]     } else {
     [java]          nt = 0;
     [java]     }
     [java]     }
     [java]     }
     [java]     }
     [java]     return ret_val;
     [java]   }
     [java]   public boolean Compare (int num1, int num2) { 
     [java]     boolean retval;
     [java]     int aux02;
     [java]     retval = false;
     [java]     aux02 = (num2 + 1);
     [java]     if ((num1 < num2)) {
     [java]         retval = false;
     [java]     } else {
     [java]          if (!(num1 < aux02)) {
     [java]         retval = false;
     [java]     } else {
     [java]          retval = true;
     [java]     }
     [java]     }
     [java]     return retval;
     [java]   }
     [java] }
     [java] 
     [java] class List { 
     [java]   Element elem;
     [java]   List next;
     [java]   boolean end;
     [java]   public boolean Init () { 
     [java]     end = true;
     [java]     return true;
     [java]   }
     [java]   public boolean InitNew (Element v_elem, List v_next, boolean v_end) { 
     [java]     end = v_end;
     [java]     elem = v_elem;
     [java]     next = v_next;
     [java]     return true;
     [java]   }
     [java]   public List Insert (Element new_elem) { 
     [java]     boolean ret_val;
     [java]     List aux03;
     [java]     List aux02;
     [java]     aux03 = this;
     [java]     aux02 = new List();
     [java]     ret_val = aux02.InitNew(new_elem, aux03, false);
     [java]     return aux02;
     [java]   }
     [java]   public boolean SetNext (List v_next) { 
     [java]     next = v_next;
     [java]     return true;
     [java]   }
     [java]   public List Delete (Element e) { 
     [java]     List my_head;
     [java]     boolean ret_val;
     [java]     boolean aux05;
     [java]     List aux01;
     [java]     List prev;
     [java]     boolean var_end;
     [java]     Element var_elem;
     [java]     int aux04;
     [java]     int nt;
     [java]     my_head = this;
     [java]     ret_val = false;
     [java]     aux04 = (0 - 1);
     [java]     aux01 = this;
     [java]     prev = this;
     [java]     var_end = end;
     [java]     var_elem = elem;
     [java]     while ((!var_end && !ret_val)) {
     [java] 	  if (e.Equal(var_elem)) {
     [java]         ret_val = true;
     [java]         if ((aux04 < 0)) {
     [java]         my_head = aux01.GetNext();
     [java]     } else {
     [java]          System.out.println((0 - 555));
     [java]          aux05 = prev.SetNext(aux01.GetNext());
     [java]          System.out.println((0 - 555));
     [java]     }
     [java]     } else {
     [java]          nt = 0;
     [java]     }
     [java] 	  if (!ret_val) {
     [java]         prev = aux01;
     [java]         aux01 = aux01.GetNext();
     [java]         var_end = aux01.GetEnd();
     [java]         var_elem = aux01.GetElem();
     [java]         aux04 = 1;
     [java]     } else {
     [java]          nt = 0;
     [java]     }
     [java] 	}
     [java]     return my_head;
     [java]   }
     [java]   public int Search (Element e) { 
     [java]     int int_ret_val;
     [java]     List aux01;
     [java]     Element var_elem;
     [java]     boolean var_end;
     [java]     int nt;
     [java]     int_ret_val = 0;
     [java]     aux01 = this;
     [java]     var_end = end;
     [java]     var_elem = elem;
     [java]     while (!var_end) {
     [java] 	  if (e.Equal(var_elem)) {
     [java]         int_ret_val = 1;
     [java]     } else {
     [java]          nt = 0;
     [java]     }
     [java] 	  aux01 = aux01.GetNext();
     [java] 	  var_end = aux01.GetEnd();
     [java] 	  var_elem = aux01.GetElem();
     [java] 	}
     [java]     return int_ret_val;
     [java]   }
     [java]   public boolean GetEnd () { 
     [java]     return end;
     [java]   }
     [java]   public Element GetElem () { 
     [java]     return elem;
     [java]   }
     [java]   public List GetNext () { 
     [java]     return next;
     [java]   }
     [java]   public boolean Print () { 
     [java]     List aux01;
     [java]     boolean var_end;
     [java]     Element var_elem;
     [java]     aux01 = this;
     [java]     var_end = end;
     [java]     var_elem = elem;
     [java]     while (!var_end) {
     [java] 	  System.out.println(var_elem.GetAge());
     [java] 	  aux01 = aux01.GetNext();
     [java] 	  var_end = aux01.GetEnd();
     [java] 	  var_elem = aux01.GetElem();
     [java] 	}
     [java]     return true;
     [java]   }
     [java] }
     [java] 
     [java] class LL { 
     [java] 
     [java]   public int Start () { 
     [java]     List head;
     [java]     List last_elem;
     [java]     boolean aux01;
     [java]     Element el01;
     [java]     Element el02;
     [java]     Element el03;
     [java]     last_elem = new List();
     [java]     aux01 = last_elem.Init();
     [java]     head = last_elem;
     [java]     aux01 = head.Init();
     [java]     aux01 = head.Print();
     [java]     el01 = new Element();
     [java]     aux01 = el01.Init(25, 37000, false);
     [java]     head = head.Insert(el01);
     [java]     aux01 = head.Print();
     [java]     System.out.println(10000000);
     [java]     el01 = new Element();
     [java]     aux01 = el01.Init(39, 42000, true);
     [java]     el02 = el01;
     [java]     head = head.Insert(el01);
     [java]     aux01 = head.Print();
     [java]     System.out.println(10000000);
     [java]     el01 = new Element();
     [java]     aux01 = el01.Init(22, 34000, false);
     [java]     head = head.Insert(el01);
     [java]     aux01 = head.Print();
     [java]     el03 = new Element();
     [java]     aux01 = el03.Init(27, 34000, false);
     [java]     System.out.println(head.Search(el02));
     [java]     System.out.println(head.Search(el03));
     [java]     System.out.println(10000000);
     [java]     el01 = new Element();
     [java]     aux01 = el01.Init(28, 35000, false);
     [java]     head = head.Insert(el01);
     [java]     aux01 = head.Print();
     [java]     System.out.println(2220000);
     [java]     head = head.Delete(el02);
     [java]     aux01 = head.Print();
     [java]     System.out.println(33300000);
     [java]     head = head.Delete(el01);
     [java]     aux01 = head.Print();
     [java]     System.out.println(44440000);
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_05.java------------
     [java] class cse401c_correct_05 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestInheritanceSimple().test());
     [java]   }
     [java] }
     [java] 
     [java] class TestInheritanceSimple { 
     [java] 
     [java]   public int test () { 
     [java]     Person p;
     [java]     boolean b;
     [java]     int i;
     [java]     p = new Male();
     [java]     b = p.setAge(21);
     [java]     b = p.setIsMale(true);
     [java]     i = p.getAge();
     [java]     b = p.getIsMale();
     [java]     return 21;
     [java]   }
     [java] }
     [java] 
     [java] class Person { 
     [java]   int age;
     [java]   boolean isMale;
     [java]   public boolean setAge (int a) { 
     [java]     age = a;
     [java]     return true;
     [java]   }
     [java]   public boolean setIsMale (boolean iM) { 
     [java]     isMale = iM;
     [java]     return true;
     [java]   }
     [java]   public int getAge () { 
     [java]     return age;
     [java]   }
     [java]   public boolean getIsMale () { 
     [java]     return isMale;
     [java]   }
     [java] }
     [java] 
     [java] class Male extends Person { 
     [java] 
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_20.java------------
     [java] class cse401c_ctfail_20 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestFailure().test());
     [java]   }
     [java] }
     [java] 
     [java] class TestFailure { 
     [java] 
     [java]   public double test () { 
     [java]     return 1;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_correct_09.java------------
     [java] class cse401c_correct_09 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestDoubleArithmetic().test());
     [java]   }
     [java] }
     [java] 
     [java] class TestDoubleArithmetic { 
     [java] 
     [java]   public double test () { 
     [java]     System.out.println((0.5 + 0.5));
     [java]     System.out.println((20000.0 - 19999.0));
     [java]     System.out.println((4.0 * 0.25));
     [java]     System.out.println((4.0 / 4.0));
     [java]     System.out.println((5.0 % 4.0));
     [java]     return (1.0 / 2.0);
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_11.java------------
     [java] class cse401c_ctfail_11 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new Test().test());
     [java]   }
     [java] }
     [java] 
     [java] class Test { 
     [java] 
     [java]   public int test () { 
     [java]     int unin;
     [java]     unin = (unin + 1);
     [java]     return unin;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/cse401c_ctfail_15.java------------
     [java] class cse401c_ctfail_15 {
     [java]   public static void main (String [] args) {
     [java]     System.out.println(new TestMismatchTypes().test(1, 1.0));
     [java]   }
     [java] }
     [java] 
     [java] class TestMismatchTypes { 
     [java] 
     [java]   public int test (int x, double y) { 
     [java]     int test1;
     [java]     double test2;
     [java]     test1 = x;
     [java]     test2 = y;
     [java]     return (test1 + test2);
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/ExampleConst.java------------
     [java] class LinearSearch {
     [java]   public static void main (String [] a) {
     [java]     System.out.println(new LS().Start(10));
     [java]   }
     [java] }
     [java] 
     [java] class LS { 
     [java]   int [] number;
     [java]   int size;
     [java]   public int Start (int sz) { 
     [java]     int aux01;
     [java]     int aux02;
     [java]     aux01 = this.Init(sz);
     [java]     aux02 = this.Print();
     [java]     System.out.println(9999);
     [java]     System.out.println(this.Search(8));
     [java]     System.out.println(this.Search(12));
     [java]     System.out.println(this.Search(17));
     [java]     System.out.println(this.Search(50));
     [java]     return 55;
     [java]   }
     [java]   public int Print () { 
     [java]     int j;
     [java]     j = 1;
     [java]     while ((j < size)) {
     [java] 	  System.out.println(number[j]);
     [java] 	  j = (j + 1);
     [java] 	}
     [java]     return 0;
     [java]   }
     [java]   public int Search (int num) { 
     [java]     int j;
     [java]     boolean ls01;
     [java]     int ifound;
     [java]     int aux01;
     [java]     int aux02;
     [java]     int nt;
     [java]     j = 1;
     [java]     ls01 = false;
     [java]     ifound = 0;
     [java]     while ((j < size)) {
     [java] 	  aux01 = number[j];
     [java] 	  aux02 = (num + 1);
     [java] 	  if ((aux01 < num)) {
     [java]         nt = 0;
     [java]     } else {
     [java]          if (!(aux01 < aux02)) {
     [java]         nt = 0;
     [java]     } else {
     [java]          ls01 = true;
     [java]          ifound = 1;
     [java]          j = size;
     [java]     }
     [java]     }
     [java] 	  j = (j + 1);
     [java] 	}
     [java]     return ifound;
     [java]   }
     [java]   public int Init (int sz) { 
     [java]     int j;
     [java]     int k;
     [java]     int aux01;
     [java]     int aux02;
     [java]     size = sz;
     [java]     number = new int [sz];
     [java]     j = 1;
     [java]     k = (size + 1);
     [java]     while ((j < size)) {
     [java] 	  aux01 = (2 * j);
     [java] 	  aux02 = (k - 3);
     [java] 	  number[j] = (aux01 + aux02);
     [java] 	  j = (j + 1);
     [java] 	  k = (k - 1);
     [java] 	}
     [java]     return 0;
     [java]   }
     [java] }
     [java] 
     [java] ------------Parsing SamplePrograms/Example.java------------
     [java] Syntax error at line 1 of input
     [java] Couldn't repair and continue parse at line 1 of input
     [java] Unexpected internal compiler error: java.lang.Exception: Can't recover from previous error(s)
     [java] java.lang.Exception: Can't recover from previous error(s)
     [java] 	at java_cup.runtime.lr_parser.report_fatal_error(lr_parser.java:375)
     [java] 	at java_cup.runtime.lr_parser.unrecovered_syntax_error(lr_parser.java:424)
     [java] 	at java_cup.runtime.lr_parser.parse(lr_parser.java:616)
     [java] 	at TestParser.main(TestParser.java:110)

BUILD SUCCESSFUL
Total time: 25 seconds
